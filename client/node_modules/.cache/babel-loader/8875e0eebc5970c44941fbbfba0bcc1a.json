{"ast":null,"code":"var _jsxFileName = \"/Users/shelvymurphy-brown/Desktop/streams/client/src/components/streams/StreamList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchStreams } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamList extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderAdmin = stream => {\n      if (stream.userId === this.props.currentUserId) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right floated content\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/streams/edit/${stream.id}`,\n            className: \"ui button primary\",\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"ui button negative\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }, this);\n      }\n    };\n\n    this.renderList = () => {\n      console.log(this.props.streams);\n      return this.props.streams.map(stream => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: [this.renderAdmin(stream), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"large middle aligned icon camera\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [stream.title, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"description\",\n              children: stream.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 14\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 12\n          }, this)]\n        }, stream.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this);\n      });\n    };\n\n    this.renderCreate = () => {\n      if (this.props.isSignedIn) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'right'\n          },\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/streams/new\",\n            className: \"ui button primary\",\n            children: \"Create Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStreams();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Streams\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui celled list\",\n        children: this.renderList()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), this.renderCreate()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: Object.values(state.streams),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams\n})(StreamList);","map":{"version":3,"sources":["/Users/shelvymurphy-brown/Desktop/streams/client/src/components/streams/StreamList.js"],"names":["React","connect","Link","fetchStreams","StreamList","Component","renderAdmin","stream","userId","props","currentUserId","id","renderList","console","log","streams","map","title","description","renderCreate","isSignedIn","textAlign","componentDidMount","render","mapStateToProps","state","Object","values","auth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,YAAT,QAA6B,eAA7B;;;AAGA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAKvCC,WALuC,GAKxBC,MAAD,IAAY;AACxB,UAAIA,MAAM,CAACC,MAAP,KAAkB,KAAKC,KAAL,CAAWC,aAAjC,EAAgD;AAC9C,4BACE;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAG,iBAAgBH,MAAM,CAACI,EAAG,EAArC;AAAwC,YAAA,SAAS,EAAC,mBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,YAAA,SAAS,EAAC,oBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD;AACF,KAdsC;;AAAA,SAgBvCC,UAhBuC,GAgB1B,MAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWM,OAAvB;AACC,aAAO,KAAKN,KAAL,CAAWM,OAAX,CAAmBC,GAAnB,CAAuBT,MAAM,IAAI;AACvC,4BACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,qBACI,KAAKD,WAAL,CAAiBC,MAAjB,CADJ,eAEG;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBAFH,eAGG;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA,uBACGA,MAAM,CAACU,KADV,eAEE;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBAA8BV,MAAM,CAACW;AAArC;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHH;AAAA,WAA2BX,MAAM,CAACI,EAAlC;AAAA;AAAA;AAAA;AAAA,gBADF;AAUA,OAXM,CAAP;AAYF,KA9BsC;;AAAA,SAgCvCQ,YAhCuC,GAgCxB,MAAM;AACnB,UAAI,KAAKV,KAAL,CAAWW,UAAf,EAA2B;AACzB,4BACE;AAAK,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAC;AAAZ,WAAZ;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,cAAT;AAAwB,YAAA,SAAS,EAAC,mBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD;AACF,KA1CsC;AAAA;;AACvCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKb,KAAL,CAAWN,YAAX;AACD;;AAyCDoB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBAAiC,KAAKX,UAAL;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF,EAGG,KAAKO,YAAL,EAHH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AApDsC;;AAuDzC,MAAMK,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AAAEV,IAAAA,OAAO,EAAEW,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACV,OAApB,CAAX;AAAyCL,IAAAA,aAAa,EAAEe,KAAK,CAACG,IAAN,CAAWpB,MAAnE;AAA2EY,IAAAA,UAAU,EAAEK,KAAK,CAACG,IAAN,CAAWR;AAAlG,GAAP;AACD,CAFD;;AAIA,eAAenB,OAAO,CAACuB,eAAD,EAAkB;AAAErB,EAAAA;AAAF,CAAlB,CAAP,CAA4CC,UAA5C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchStreams } from '../../actions';\n\n\nclass StreamList extends React.Component {\n  componentDidMount() {\n    this.props.fetchStreams();\n  }\n\n  renderAdmin = (stream) => {\n    if (stream.userId === this.props.currentUserId) {\n      return (\n        <div className=\"right floated content\">\n          <Link to={`/streams/edit/${stream.id}`} className=\"ui button primary\">Edit</Link>\n          <button className=\"ui button negative\">Delete</button>\n        </div>\n      );\n    }\n  };\n\n  renderList = () => {\n    console.log(this.props.streams)\n     return this.props.streams.map(stream => {\n      return (\n        <div className=\"item\" key={stream.id}>\n           {this.renderAdmin(stream)}\n           <i className=\"large middle aligned icon camera\" />\n           <div className=\"content\">\n             {stream.title}\n             <div className=\"description\">{stream.description}</div>\n           </div>\n        </div>\n      )\n     });\n  };\n\n  renderCreate = () => {\n    if (this.props.isSignedIn) {\n      return (\n        <div style={{ textAlign:'right' }}>\n          <Link to=\"/streams/new\" className=\"ui button primary\">\n          Create Stream\n          </Link>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>Streams</h2>\n        <div className=\"ui celled list\">{this.renderList()}</div>\n        {this.renderCreate()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { streams: Object.values(state.streams), currentUserId: state.auth.userId, isSignedIn: state.auth.isSignedIn };\n};\n\nexport default connect(mapStateToProps, { fetchStreams }) (StreamList);\n"]},"metadata":{},"sourceType":"module"}